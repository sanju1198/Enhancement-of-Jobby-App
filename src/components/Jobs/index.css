import {Component} from 'react'
import Loader from 'react-loader-spinner'
import Cookies from 'js-cookie'
import {BsFillBriefcaseFill, BsStarFill} from 'react-icons/bs'
import {BiLinkExternal} from 'react-icons/bi'
import {MdLocationOn} from 'react-icons/md'

import Header from '../Header'
import SimilarJobItem from '../SimilarJobItem'
import SkillsCard from '../SkillsCard'
import './index.css'

const apiStatusConstants = {
  initial: 'INITIAL',
  success: 'SUCCESS',
  failure: 'FAILURE',
  inProgress: 'IN_PROGRESS',
}

class JobItemDetails extends Component {
  state = {
    jobData: {},
    similarJobsData: [],
    apiStatus: apiStatusConstants.initial,
  }

  componentDidMount() {
    this.getJobData()
  }

  getFormattedSimilarData = data => ({
    companyLogoUrl: data.company_logo_url,
    employmentType: data.employment_type,
    id: data.id,
    jobDescription: data.job_description,
    location: data.location,
    rating: data.rating,
    title: data.title,
  })

  getFormattedData = data => ({
    companyLogoUrl: data.company_logo_url,
    companyWebsiteUrl: data.company_website_url,
    employmentType: data.employment_type,
    id: data.id,
    jobDescription: data.job_description,
    lifeAtCompany: {
      description: data.life_at_company.description,
      imageUrl: data.life_at_company.image_url,
    },
    location: data.location,
    rating: data.rating,
    title: data.title,
    packagePerAnnum: data.package_per_annum,
    skills: data.skills.map(eachSkill => ({
      imageUrl: eachSkill.image_url,
      name: eachSkill.name,
    })),
  })

  getJobData = async () => {
    this.setState({apiStatus: apiStatusConstants.inProgress})
    const {match} = this.props
    const {params} = match
    const {id} = params

    const jwtToken = Cookies.get('jwt_token')
    const url = `https://apis.ccbp.in/jobs/${id}`
    const options = {
      headers: {
        Authorization: `Bearer ${jwtToken}`,
      },
      method: 'GET',
    }

    const response = await fetch(url, options)
    if (response.ok === true) {
      const data = await response.json()
      // console.log(data)
      const updatedData = this.getFormattedData(data.job_details)
      // console.log(updatedData)
      const updatedSimilarJobsData = data.similar_jobs.map(eachSimilarJob =>
        this.getFormattedSimilarData(eachSimilarJob),
      )
      // console.log(updatedData)
      // console.log(updatedSimilarJobsData)
      this.setState({
        jobData: updatedData,
        similarJobsData: updatedSimilarJobsData,
        apiStatus: apiStatusConstants.success,
      })
    } else {
      this.setState({apiStatus: apiStatusConstants.failure})
    }
  }

  renderFailureView = () => {
    const {match} = this.props
    const {params} = match
    // eslint-disable-next-line
    const {id} = params
    return (
      <div className="job-item-error-view-container">
        <img
          src="https://assets.ccbp.in/frontend/react-js/failure-img.png"
          alt="failure view"
          className="job-item-failure-img"
        />
        <h1 className="job-item-failure-heading-text">
          Oops! Something Went Wrong
        </h1>
        <p className="job-item-failure-description">
          We cannot seem to find the page you are looking for
        </p>

        <button
          type="button"
          data-testid="button"
          className="job-item-failure-button"
          onClick={this.getJobData}
        >
          Retry
        </button>
      </div>
    )
  }

  renderLoadingView = () => (
    <div className="job-item-loader-container" data-testid="loader">
      <Loader type="ThreeDots" color="#ffffff" height="50" width="50" />
    </div>
  )

  renderJobDetailsView = () => {
    const {jobData, similarJobsData} = this.state
    const {
      companyLogoUrl,
      companyWebsiteUrl,
      employmentType,
      jobDescription,
      location,
      packagePerAnnum,
      rating,
      title,
      lifeAtCompany,
      skills,
    } = jobData
    const {description, imageUrl} = lifeAtCompany
    return (
      <div className="job-details-view-container">
        <div className="job-item">
          <div className="logo-title-location-container">
            <div className="logo-title-container">
              <img
                src={companyLogoUrl}
                alt="job details company logo"
                className="company-logo"
              />
              <div className="title-rating-container">
                <h1 className="title-heading">{title}</h1>
                <div className="rating-container">
                  <BsStarFill className="rating-icon" />
                  <p className="rating-heading">{rating}</p>
                </div>
              </div>
            </div>
            <div className="location-package-container">
              <div className="location-employee-container">
                <div className="location-container">
                  <MdLocationOn className="location-icon" />
                  <p className="location-heading">{location}</p>
                </div>
                <div className="employee-type-container">
                  <BsFillBriefcaseFill className="brief-case-icon" />
                  <p className="employee-type-heading">{employmentType}</p>
                </div>
              </div>
              <p className="package-heading">{packagePerAnnum}</p>
            </div>
          </div>
          <hr className="line" />
          <div className="description-visit-container">
            <h1 className="description-heading">Description</h1>
            <div className="visit-container">
              <a href={companyWebsiteUrl} className="visit-heading">
                Visit
              </a>
              <BiLinkExternal className="visit-icon" />
            </div>
          </div>
          <p className="description-text">{jobDescription}</p>
          <h1 className="skills-heading">Skills</h1>
          <ul className="skills-list-container">
            {skills.map(eachSkill => (
              <SkillsCard skillDetails={eachSkill} key={eachSkill.name} />
            ))}
          </ul>
          <h1 className="life-at-company-heading">Life at Company</h1>
          <div className="life-at-company-description-image-container">
            <p className="life-at-company-description">{description}</p>
            <img
              src={imageUrl}
              alt="life at company"
              className="life-at-company-image"
            />
          </div>
        </div>
        <h1 className="similar-jobs-heading">Similar Jobs</h1>
        <ul className="similar-jobs-list">
          {similarJobsData.map(eachSimilarJob => (
            <SimilarJobItem
              jobDetails={eachSimilarJob}
              key={eachSimilarJob.id}
            />
          ))}
        </ul>
      </div>
    )
  }

  renderJobDetails = () => {
    const {apiStatus} = this.state

    switch (apiStatus) {
      case apiStatusConstants.success:
        return this.renderJobDetailsView()
      case apiStatusConstants.failure:
        return this.renderFailureView()
      case apiStatusConstants.inProgress:
        return this.renderLoadingView()
      default:
        return null
    }
  }

  render() {
    return (
      <>
        <Header />
        <div className="job-item-details-container">
          {this.renderJobDetails()}
        </div>
      </>
    )
  }
}
export default JobItemDetails.jobs-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: #000000;
  background-size: cover;

  min-height: 90vh;
}

.jobs-content {
  display: flex;
  flex-direction: column;
  width: 90%;
}
@media screen and (min-width: 768px) {
  .jobs-content {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding-bottom: 100px;
    width: 90%;
  }
}
.loader-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 70vh;
  flex-grow: 1;
}
@media screen and (min-width: 768px) {
  .loader-container {
    width: 100%;
  }
}
.jobs-error-view-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin-top: 48px;
  padding-bottom: 64px;
  flex-grow: 1;
}
@media screen and (min-width: 768px) {
  .jobs-error-view-container {
    width: 70%;
    width: 100%;
    margin-top: 70px;
    padding-bottom: 0px;
  }
}
.jobs-failure-img {
  width: 250px;
  height: 200px;
}
@media screen and (min-width: 768px) {
  .jobs-failure-img {
    width: 400px;
    height: 350px;
  }
}
.jobs-failure-heading-text {
  color: #ffffff;
  font-family: 'Roboto';
  font-size: 24px;
  font-weight: 500;
  line-height: 1.3;
  text-align: center;
}
@media screen and (min-width: 768px) {
  .jobs-failure-heading-text {
    font-size: 30px;
  }
}
.jobs-failure-description {
  text-align: center;
  color: #ffffff;
  font-family: 'Roboto';
  font-size: 12px;
  width: 90%;
  max-width: 388px;
  margin-top: 0px;
}
@media screen and (min-width: 768px) {
  .jobs-failure-description {
    font-size: 16px;
  }
}
.jobs-failure-button {
  padding: 8px 32px;
  border-radius: 5px;
  border: none;
  outline: none;
  cursor: pointer;
  background-color: #4f46e5;
  color: #ffffff;
  font-size: 18px;
  font-weight: 500;
  font-family: 'Roboto';
}
.no-jobs-view {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding-bottom: 64px;
  margin-top: 48px;
}

@media screen and (min-width: 768px) {
  .no-jobs-view {
    margin-left: 30px;
    width: 100%;
    padding-bottom: 0;
    margin-top: 0px;
  }
}

.no-jobs-img {
  width: 250px;
  height: 180px;
}

@media screen and (min-width: 768px) {
  .no-jobs-img {
    width: 459px;
    height: 315px;
  }
}

.no-jobs-heading {
  color: #ffffff;
  font-family: 'Roboto';
  font-size: 24px;
  font-weight: 500;
  line-height: 1.3px;
  width: 90%;
  text-align: center;
}

@media screen and (min-width: 768px) {
  .no-jobs-heading {
    margin-top: 32px;
    font-size: 42px;
  }
}

.no-jobs-description {
  text-align: center;
  color: #ffffff;
  font-family: 'Roboto';
  font-size: 12px;
  width: 90%;
  max-width: 288px;
  line-height: 1.3;
}

@media screen and (min-width: 768px) {
  .no-jobs-description {
    margin-top: 12px;
    font-size: 14px;
    width: 60%;
    max-width: 466px;
  }
}

@media screen and (min-width: 768px) {
  .all-jobs-container {
    width: 100%;
  }
}
.jobs-list {
  padding-left: 0;
}
.search-input-jobs-list-container {
  display: flex;
  flex-direction: column;
  width: 100%;
}

@media screen and (min-width: 768px) {
  .search-input-jobs-list-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex-grow: 1;
    margin-left: 40px;
    margin-top: 28px;
  }
}
.search-input-container-desktop {
  display: flex;
  align-self: flex-start;
  background-color: transparent;
  border-radius: 8px;
  border: 1px solid #7e858e;
  margin-bottom: 20px;
  margin-top: 20px;
}

.search-input-desktop {
  background-color: transparent;
  color: #ffffff;
  font-family: 'Roboto';
  font-size: 14px;
  font-weight: 500;
  border: none;
  outline: none;
  flex-grow: 1;
  padding-left: 16px;
  padding-top: 6px;
  padding-bottom: 6px;
  padding-right: 16px;
  width: 450px;
}
.search-button-container-desktop {
  background-color: #475569;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 10px 20px;
  border-top-right-radius: 8px;
  border-bottom-right-radius: 8px;
  margin: 0px;
}

.search-icon-desktop {
  color: #ffffff;
  width: 15px;
  height: 15px;
}
@media screen and (max-width: 768px) {
  .search-input-container-desktop {
    display: none;
  }
}

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}